{"ast":null,"code":"var _jsxFileName = \"/Users/plumita/Desktop/Programacion/BootcampLenio/projectmarvel/src/App.js\";\nimport React, { useState } from \"react\";\nimport SearchBar from \"./components/elements/header/search\";\nimport Cardlist from \"./components/CardList\";\nimport getCharacters from \"./api/marvelApi\";\nimport CharacterDetails from \"./components/CharacterComics\";\nimport { Element } from \"react-scroll\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageFound = /image_not_available/gi;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters: [],\n      name: null,\n      offset: 0\n    }[(showModal, setShowModal)] = useState(false);\n\n    this.openModal = () => {\n      setShowModal(prev => !prev);\n    };\n\n    this.onCharacterSelect = e => {\n      this.setState({\n        selectedCard: e\n      });\n    };\n\n    this.onFormSubmit = e => {\n      this.getMarvelResponse(null, `&nameStartsWith=${e}`, 0);\n    };\n\n    this.shuffleArray = characters => {\n      for (var c = characters.length - 1; c > 0; c--) {\n        var b = Math.floor(Math.random() * (c + 1));\n        var a = characters[c];\n        characters[c] = characters[b];\n        characters[b] = a;\n      }\n\n      return characters;\n    };\n\n    this.getMarvelResponse = (id, name, offset) => {\n      getCharacters({\n        id: id,\n        name: name,\n        offset: offset\n      }).then(({\n        characters\n      }) => {\n        this.shuffleArray(characters);\n        this.setState({\n          characters: characters.splice(0, 12).filter(chr => !chr.thumbnail.path.match(imageFound)),\n          selectedCard: null,\n          offset: offset,\n          name: name\n        }, () => {\n          console.log(this.state.characters);\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getMarvelResponse(null, null, this.state.offset);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onFormSubmit: this.onFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Cardlist, {\n        characters: this.state.characters,\n        onCharacterSelect: this.onCharacterSelect,\n        onClick: openModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CharacterDetails, {\n        selectedCard: this.state.selectedCard,\n        showModal: showModal,\n        setShowModal: setShowModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        id: \"CharacterDetails\",\n        name: \"CharacterDetails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/plumita/Desktop/Programacion/BootcampLenio/projectmarvel/src/App.js"],"names":["React","useState","SearchBar","Cardlist","getCharacters","CharacterDetails","Element","imageFound","App","Component","state","characters","name","offset","showModal","setShowModal","openModal","prev","onCharacterSelect","e","setState","selectedCard","onFormSubmit","getMarvelResponse","shuffleArray","c","length","b","Math","floor","random","a","id","then","splice","filter","chr","thumbnail","path","match","console","log","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport SearchBar from \"./components/elements/header/search\";\nimport Cardlist from \"./components/CardList\";\nimport getCharacters from \"./api/marvelApi\";\nimport CharacterDetails from \"./components/CharacterComics\";\nimport {Element} from \"react-scroll\"\n\n\nconst imageFound = /image_not_available/gi;\n\nclass App extends React.Component {\n  state = { characters: [], name: null, offset: 0}\n  [showModal, setShowModal] = useState(false);\n\n  openModal = () => {\n    setShowModal(prev => !prev)\n  }\n\n  componentDidMount() {\n    this.getMarvelResponse(null, null, this.state.offset);\n  }\n\n  onCharacterSelect = (e) => {\n    this.setState({ selectedCard: e });\n  };\n  onFormSubmit = (e) => {\n    this.getMarvelResponse(null, `&nameStartsWith=${e}`, 0);\n  };\n  shuffleArray = (characters) =>  {\n    for (var c = characters.length - 1; c > 0; c--) {\n      var b = Math.floor(Math.random() * (c + 1));\n      var a = characters[c];\n      characters[c] = characters[b];\n      characters[b] = a;\n    }\n    return characters\n  };\n  getMarvelResponse = (id, name, offset) => {\n    getCharacters({\n      id: id,\n      name: name,\n      offset: offset,\n    }).then(({ characters }) => {\n      this.shuffleArray(characters)\n      this.setState(\n        {\n          characters: characters.splice(0,12).filter(\n            (chr) => !chr.thumbnail.path.match(imageFound)\n          ),      \n\n          selectedCard: null,\n          offset: offset,\n          name: name,\n        },\n        () => {\n          console.log(this.state.characters);\n        }\n      );\n    });\n  };\n  \n  render(){\n  return (\n    <div className=\"App\" >\n      <SearchBar onFormSubmit={this.onFormSubmit} />\n      <Cardlist\n      characters={this.state.characters}\n      onCharacterSelect={this.onCharacterSelect}\n      onClick={openModal}\n      />\n      <CharacterDetails selectedCard={this.state.selectedCard} showModal={showModal} setShowModal={setShowModal} />\n      <Element id=\"CharacterDetails\" name=\"CharacterDetails\" />\n\n    </div>\n  );\n}\n\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}