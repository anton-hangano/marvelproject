{"ast":null,"code":"var _jsxFileName = \"/Users/plumita/Desktop/Programacion/BootcampLenio/projectmarvel/src/components/api/characters/FetchCharacters.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FetchCharacters() {\n  _s();\n\n  const [characters, setCharacters] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState();\n  React.useEffect(() => {\n    const API_PUB = process.env.REACT_APP_API_PUB_KEY;\n    const ts = 1;\n    const hash = '64e20774a9bc0da1b2783e768cd14567';\n    const URL_KEY = `https://gateway.marvel.com/v1/public/characters?ts=${ts}&apikey=${API_PUB}&hash=${hash}`;\n    axios.get(URL_KEY).then(characters => {\n      setCharacters(characters.data.data.results.slice(0, 8));\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n  const charactersArray = Object.values(characters);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error || !Array.isArray(charactersArray)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There was an error loading your data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(FetchCharacters, \"E9nWtJzJUGxPtPVl2nzuBb8/yOg=\");\n\n_c = FetchCharacters;\nexport default FetchCharacters;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchCharacters\");","map":{"version":3,"sources":["/Users/plumita/Desktop/Programacion/BootcampLenio/projectmarvel/src/components/api/characters/FetchCharacters.js"],"names":["React","axios","FetchCharacters","characters","setCharacters","useState","loading","setLoading","error","setError","useEffect","API_PUB","process","env","REACT_APP_API_PUB_KEY","ts","hash","URL_KEY","get","then","data","results","slice","catch","err","finally","charactersArray","Object","values","Array","isArray"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,SAASC,eAAT,GAA0B;AAAA;;AACtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAApC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,KAAK,CAACK,QAAN,CAAe,IAAf,CAA9B;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACK,QAAN,EAA1B;AAGAL,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAI;AAChB,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA5B;AACA,UAAMC,EAAE,GAAG,CAAX;AACA,UAAMC,IAAI,GAAG,kCAAb;AACA,UAAMC,OAAO,GAAI,sDAAqDF,EAAG,WAAUJ,OAAQ,SAAQK,IAAK,EAAxG;AAEDf,IAAAA,KAAK,CAACiB,GAAN,CAAUD,OAAV,EACEE,IADF,CACOhB,UAAU,IAChB;AAACC,MAAAA,aAAa,CAACD,UAAU,CAACiB,IAAX,CAAgBA,IAAhB,CAAqBC,OAArB,CAA6BC,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAD,CAAb;AACA,KAHF,EAIEC,KAJF,CAISC,GAAD,IACP;AAACf,MAAAA,QAAQ,CAACe,GAAD,CAAR;AAAe,KALjB,EAKmBC,OALnB,CAK2B,MAAI;AAAClB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAmB,KALnD;AAMA,GAZH,EAYI,EAZJ;AAcE,QAAMmB,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAczB,UAAd,CAAxB;;AAEA,MAAIG,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIE,KAAK,IAAI,CAACqB,KAAK,CAACC,OAAN,CAAcJ,eAAd,CAAd,EAA8C;AAC5C,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AAEN;;GA9BQxB,e;;KAAAA,e;AAgCT,eAAeA,eAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nfunction FetchCharacters(){\n    const [characters, setCharacters] = React.useState([]);\n    const [loading, setLoading] = React.useState(true);\n    const [error, setError] = React.useState(); \n   \n\n    React.useEffect(()=>{\n        const API_PUB = process.env.REACT_APP_API_PUB_KEY;\n        const ts = 1;\n        const hash = '64e20774a9bc0da1b2783e768cd14567';\n        const URL_KEY = `https://gateway.marvel.com/v1/public/characters?ts=${ts}&apikey=${API_PUB}&hash=${hash}`;\n        \n       axios.get(URL_KEY)\n        .then(characters=>\n        {setCharacters(characters.data.data.results.slice(0,8));\n        })\n        .catch((err)=>\n        {setError(err);}).finally(()=>{setLoading(false);});\n      },[])\n      \n      const charactersArray = Object.values(characters)\n      \n      if (loading) {\n        return <p>Loading...</p>;\n      }\n      \n      if (error || !Array.isArray(charactersArray)) {\n        return <p>There was an error loading your data!</p>;\n      }\n      \n}\n\nexport default FetchCharacters;\n"]},"metadata":{},"sourceType":"module"}