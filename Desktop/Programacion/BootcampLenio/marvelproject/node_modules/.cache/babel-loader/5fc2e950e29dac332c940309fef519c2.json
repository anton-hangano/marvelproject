{"ast":null,"code":"var _jsxFileName = \"/Users/plumita/Desktop/Programacion/BootcampLenio/projectmarvel/src/components/api/characters/FetchCharacters.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchCharacters = {\n  render: _s(() => {\n    _s();\n\n    const [characters, setCharacters] = React.useState([]);\n    const [loading, setLoading] = React.useState(true);\n    const [error, setError] = React.useState();\n    React.useEffect(() => {\n      const API_PUB = process.env.REACT_APP_API_PUB_KEY;\n      const ts = 1;\n      const hash = '64e20774a9bc0da1b2783e768cd14567';\n      const URL_KEY = `https://gateway.marvel.com/v1/public/characters?ts=${ts}&apikey=${API_PUB}&hash=${hash}`;\n      axios.get(URL_KEY).then(characters => {\n        setCharacters(characters.data.data.results.slice(0, 8));\n      }).catch(err => {\n        setError(err);\n      }).finally(() => {\n        setLoading(false);\n      });\n    }, []);\n    const charactersArray = Object.values(characters);\n\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (error || !Array.isArray(charactersArray)) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There was an error loading your data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }, this);\n    }\n  }, \"E9nWtJzJUGxPtPVl2nzuBb8/yOg=\")\n};\nFetchCharacters.render();","map":{"version":3,"sources":["/Users/plumita/Desktop/Programacion/BootcampLenio/projectmarvel/src/components/api/characters/FetchCharacters.js"],"names":["React","axios","FetchCharacters","render","characters","setCharacters","useState","loading","setLoading","error","setError","useEffect","API_PUB","process","env","REACT_APP_API_PUB_KEY","ts","hash","URL_KEY","get","then","data","results","slice","catch","err","finally","charactersArray","Object","values","Array","isArray"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,MAAM,KAAE,MAAM;AAAA;;AACd,UAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAApC;AACA,UAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,KAAK,CAACM,QAAN,CAAe,IAAf,CAA9B;AACA,UAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACM,QAAN,EAA1B;AAGAN,IAAAA,KAAK,CAACW,SAAN,CAAgB,MAAI;AAChB,YAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA5B;AACA,YAAMC,EAAE,GAAG,CAAX;AACA,YAAMC,IAAI,GAAG,kCAAb;AACA,YAAMC,OAAO,GAAI,sDAAqDF,EAAG,WAAUJ,OAAQ,SAAQK,IAAK,EAAxG;AAEDhB,MAAAA,KAAK,CAACkB,GAAN,CAAUD,OAAV,EACEE,IADF,CACOhB,UAAU,IAChB;AAACC,QAAAA,aAAa,CAACD,UAAU,CAACiB,IAAX,CAAgBA,IAAhB,CAAqBC,OAArB,CAA6BC,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAD,CAAb;AACA,OAHF,EAIEC,KAJF,CAISC,GAAD,IACP;AAACf,QAAAA,QAAQ,CAACe,GAAD,CAAR;AAAe,OALjB,EAKmBC,OALnB,CAK2B,MAAI;AAAClB,QAAAA,UAAU,CAAC,KAAD,CAAV;AAAmB,OALnD;AAMA,KAZH,EAYI,EAZJ;AAcE,UAAMmB,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAczB,UAAd,CAAxB;;AAEA,QAAIG,OAAJ,EAAa;AACX,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,QAAIE,KAAK,IAAI,CAACqB,KAAK,CAACC,OAAN,CAAcJ,eAAd,CAAd,EAA8C;AAC5C,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GA7BK;AADc,CAAxB;AAiCAzB,eAAe,CAACC,MAAhB","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nconst FetchCharacters = {\n    render: () => {\n    const [characters, setCharacters] = React.useState([]);\n    const [loading, setLoading] = React.useState(true);\n    const [error, setError] = React.useState(); \n   \n\n    React.useEffect(()=>{\n        const API_PUB = process.env.REACT_APP_API_PUB_KEY;\n        const ts = 1;\n        const hash = '64e20774a9bc0da1b2783e768cd14567';\n        const URL_KEY = `https://gateway.marvel.com/v1/public/characters?ts=${ts}&apikey=${API_PUB}&hash=${hash}`;\n        \n       axios.get(URL_KEY)\n        .then(characters=>\n        {setCharacters(characters.data.data.results.slice(0,8));\n        })\n        .catch((err)=>\n        {setError(err);}).finally(()=>{setLoading(false);});\n      },[])\n      \n      const charactersArray = Object.values(characters)\n      \n      if (loading) {\n        return <p>Loading...</p>;\n      }\n      \n      if (error || !Array.isArray(charactersArray)) {\n        return <p>There was an error loading your data!</p>;\n      }\n    }   \n}\n\nFetchCharacters.render();\n"]},"metadata":{},"sourceType":"module"}